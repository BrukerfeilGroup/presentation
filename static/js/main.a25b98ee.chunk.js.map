{"version":3,"sources":["components/MemberPresentation/styles.module.css","components/GroupPresentation/styles.module.css","components/NavigationBar/styles.module.css","svg/linkedin.svg","svg/github.svg","images/vegard.JPG","images/ingve.JPG","images/gorm.JPG","images/espen.JPG","images/kevin.jpg","images/marius.jpg","components/BottomNav/styles.module.css","components/NavigationBar/index.jsx","components/MemberPresentation/index.jsx","components/GroupPresentation/index.jsx","components/Contact/index.jsx","components/BottomNav/index.jsx","components/Page/index.jsx","serviceWorker.js","index.js"],"names":["module","exports","NavigationBar","navstyles","classnames","styles","bgPrimary","Navbar","className","variant","Container","Brand","members","require","pictures","vegard","vegardpic","gorm","gormpic","ingve","ingvepic","espen","espenpic","marius","mariuspic","kevin","kevinpic","MemberPresentation","cardStyles","card","Row","CardDeck","map","member","Col","lg","md","key","name","Card","Img","style","minHeight","src","imgUrl","Body","Header","headerTitle","Text","description","Footer","Link","href","linkedInUrl","svg","alt","linkedIn","githubUrl","github","GroupPresentation","jumboStyles","jumbo","Jumbotron","paragraph","Contact","marginTop","marginBottom","justifyItems","styling","bottomNav","BottomNav","Page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a25b98ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"styles_card__1ecoZ\",\"headerTitle\":\"styles_headerTitle__3-Hg6\",\"svg\":\"styles_svg__2-suN\",\"svghover\":\"styles_svghover__2LL46\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbo\":\"styles_jumbo__3gnTd\",\"container\":\"styles_container__37Vce\",\"paragraph\":\"styles_paragraph__25tYS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bgPrimary\":\"styles_bgPrimary__12Knu\",\"bg-secondary\":\"styles_bg-secondary__3n4Gd\"};","module.exports = __webpack_public_path__ + \"static/media/linkedin.f7bd4b08.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.1c51ada5.svg\";","module.exports = __webpack_public_path__ + \"static/media/vegard.ede1c15e.JPG\";","module.exports = __webpack_public_path__ + \"static/media/ingve.362ec382.JPG\";","module.exports = __webpack_public_path__ + \"static/media/gorm.a685a951.JPG\";","module.exports = __webpack_public_path__ + \"static/media/espen.bc516f5a.JPG\";","module.exports = __webpack_public_path__ + \"static/media/kevin.fc16e83b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/marius.dd9a72f6.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomNav\":\"styles_bottomNav__e-zU_\"};","import React from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport styles from \"./styles.module.css\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport classnames from \"classnames\";\r\n\r\nconst NavigationBar = () => {\r\n    const navstyles = classnames(styles.bgPrimary, 'sticky-top')\r\n\r\n    return (\r\n        <Navbar className={navstyles} variant=\"dark\">\r\n            <Container>\r\n                <Navbar.Brand className=\"mx-auto\"><h3>Brukerfeil</h3></Navbar.Brand>\r\n            </Container>\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nexport default NavigationBar;","import React from \"react\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardDeck from \"react-bootstrap/CardDeck\";\r\nimport styles from \"./styles.module.css\";\r\nimport classnames from \"classnames\";\r\nimport linkedIn from \"../../svg/linkedin.svg\";\r\nimport github from \"../../svg/github.svg\";\r\nimport vegardpic from \"../../images/vegard.JPG\"\r\nimport ingvepic from \"../../images/ingve.JPG\"\r\nimport gormpic from \"../../images/gorm.JPG\"\r\nimport espenpic from \"../../images/espen.JPG\"\r\nimport kevinpic from \"../../images/kevin.jpg\"\r\nimport mariuspic from \"../../images/marius.jpg\"\r\nconst members = require(\"../../memberDetails.json\");\r\n\r\nconst pictures = {\r\n    vegard: vegardpic,\r\n    gorm: gormpic,\r\n    ingve: ingvepic,\r\n    espen: espenpic,\r\n    marius: mariuspic,\r\n    kevin: kevinpic\r\n}\r\n\r\nconst MemberPresentation = () => {\r\n    const cardStyles = classnames(styles.card, '')\r\n    return (\r\n        <Container>\r\n            <h1 className=\"text-center mb-4 pb-4\">Medlemmene:</h1>\r\n            <Row className=\"mt-4\">\r\n                <CardDeck>\r\n                    {members.map(member => (\r\n                        <Col className=\"mb-4\" lg=\"4\" md=\"6\" key={member.name}>\r\n                            <Card className={cardStyles} >\r\n                                <Card.Img style={{ minHeight: \"344px\" }} variant=\"top\" src={pictures[member.imgUrl]} />\r\n                                <Card.Body>\r\n                                    <Card.Header className={styles.headerTitle}>{member.name}</Card.Header>\r\n                                    <hr />\r\n                                    <Card.Text className=\"mt-2\">{member.description}</Card.Text>\r\n                                </Card.Body>\r\n                                <Card.Footer>\r\n                                    <div className=\"text-center\">\r\n                                        <Card.Link href={member.linkedInUrl}><img className={styles.svg} alt=\"Link to members LinkedIn profile\" src={linkedIn} /></Card.Link>\r\n                                        <Card.Link href={member.githubUrl}><img className={styles.svg} alt=\"Link to members GitHub profile\" src={github} /></Card.Link>\r\n                                    </div>\r\n                                </Card.Footer>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                </CardDeck>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default MemberPresentation;","import React from 'react'\r\nimport Jumbotron from 'react-bootstrap/Jumbotron'\r\nimport Container from \"react-bootstrap/Container\";\r\nimport styles from \"./styles.module.css\";\r\nimport classnames from \"classnames\";\r\n\r\nconst GroupPresentation = () => {\r\n    const jumboStyles = classnames(styles.jumbo, 'text-light');\r\n    return (\r\n        <div>\r\n            <Jumbotron className={jumboStyles}>\r\n                <Container>\r\n                    <h1>Brukerfeil</h1>\r\n                    <p className={styles.paragraph}>Vi er en gjeng på seks kamerater som jobber sammen i gruppe.\r\n                    Gruppen er en sammensveiset gjeng som er glad i teknologi og utvikling.\r\n                    Medlemmene har blandede bakgrunner og erfaringer, men sammen utfyller vi hverandre.\r\n                    Vi har jobbet sammen siden første semester, og har dermed god synergi og er ikke redd for å gi\r\n                    konstruktiv kritikk for å oppnå høy kvalitet.\r\n                    Vi har erfaring med systemutviklingsprosjekt fra start til slutt, og kunne tenke oss et\r\n                    utviklingsprosjekt som inneholder alt fra analyse og design til implementering,\r\n                        testing og deployment.</p>\r\n                </Container>\r\n            </Jumbotron>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GroupPresentation\r\n","import React from 'react'\r\n\r\nconst Contact = () => {\r\n    return (\r\n\r\n        <div style={{ marginTop: \"100px\", marginBottom: \"100px\", justifyItems: \"center\" }}>\r\n            <h2 className=\"text-center\">Kontakt oss gjerne på <u>brukerfeilgroup@gmail.com</u></h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact\r\n","import React from 'react'\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport styles from \"./styles.module.css\";\r\nimport classnames from \"classnames\";\r\n\r\nconst styling = classnames(styles.bottomNav, \"\")\r\nconst BottomNav = () => {\r\n\r\n    return (\r\n        <Navbar className={styling}>\r\n            <Navbar.Text className=\"mx-auto text-white\">Source code is availible at <a className=\"text-white font-weight-bold\" href=\"https://github.com/BrukerfeilGroup/presentation\">Github</a></Navbar.Text>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default BottomNav;","import React from \"react\";\r\nimport NavigationBar from \"../NavigationBar\";\r\nimport MemberPresentation from \"../MemberPresentation\";\r\nimport GroupPresentation from \"../GroupPresentation\";\r\nimport Contact from \"../Contact\";\r\nimport BottomNav from \"../BottomNav\";\r\n\r\nconst Page = () => {\r\n    return (\r\n        <div>\r\n            <NavigationBar />\r\n            <GroupPresentation />\r\n            <MemberPresentation />\r\n            <hr />\r\n            <Contact />\r\n            <BottomNav />\r\n        </div>)\r\n}\r\n\r\nexport default Page;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Page from './components/Page';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Page />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}